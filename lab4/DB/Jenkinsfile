pipeline {
    agent any
    environment {
        DOCKER_HOST = 'tcp://dind:2375'  // Указываем адрес DinD
    }
    stages {

        stage('Checkout Repository') {
            steps {
                // Клонирование репозитория
                git branch: 'feature/lab4-jenkins', url: 'https://github.com/valerizabby/sbt-devops-hw.git'
            }
        }

        stage('Updating system') {
            steps {
                sh 'apt-get update'
            }
        }

        stage('Install Dependencies') {
            steps {
                // установка зависимостей для сборки
                sh 'apt install -y python3 python3-pip'
                // Установка зависимостей для тестов
                sh 'apt install -y python3-pytest python3-venv'
                // Зависимость чтобы работал psycopg2
                sh 'apt install -y libpq-dev'
            }
        }

        stage("Build Virtual Environment"){
            steps {
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r ./lab4/DB/app/requirements.txt
                '''
            }
        }

        stage('Run Unit Tests') {
            steps {
                // Запуск тестов и генерация отчёта покрытия
                sh '''
                    . venv/bin/activate
                    pytest lab4/DB/tests/ --cov=lab4/DB/app --cov-report=xml:coverage.xml --junitxml=test-results.xml
                '''
            }
            post {
                always {
                    // Публикация JUnit-отчётов тестов
                    junit 'test-results.xml'

                    // Публикация отчёта покрытия
                    step([$class: 'CoberturaPublisher', coberturaReportFile: 'coverage.xml'])
                }
            }
        }

        stage('Verify Test Coverage') {
            steps {
                script {
                    def coverage = sh(
                        script: '''
                        . venv/bin/activate
                        coverage report --fail-under=85
                        ''',
                        returnStatus: true
                    )

                    if (coverage != 0) {
                        error("Test coverage is below 90%")
                    }
                }
            }
        }

        stage('Code Analysis') {
            environment {
                scannerHome = tool 'sonar'
            }
            steps {
                script {
                    withSonarQubeEnv('sonar') {
                        sh '''
                        ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=sbt-devops-hw \
                            -Dsonar.projectName="SBT DevOps HW" \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=lab4/DB/app/ \
                            -Dsonar.language=py \
                            -Dsonar.host.url=http://sonarqube:9000 \
                            -Dsonar.python.coverage.reportPaths=coverage.xml \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                sh '''
                . venv/bin/activate
                python3 lab4/DB/setup.py sdist bdist_wheel
                '''
            }
        }

        stage('Install Application') {
            steps {
                sh '''
                . venv/bin/activate
                pip3 install dist/flask_postgres_app-1.0.0-py3-none-any.whl --force-reinstall
                '''
            }
        }

        stage('Clear Port 5555') {
            steps {
                script {
                    // Выполняем очистку порта 5555 для запуска приложения
                    sh '''
                    if lsof -i :5555; then
                        echo "Port 5555 is in use. Killing the process."
                        kill -9 $(lsof -t -i :5555)
                    else
                        echo "Port 5555 is free."
                    fi
                    '''
                }
            }
        }

        stage('Deploy Application') {
            steps {
                 sh '''
                    # Используем bash
                    bash -c "
                    . venv/bin/activate
                    nohup flask_postgres_app > flask.log 2>&1 &
                    disown
                    "
                    '''
            }
        }


// Как бы я деплоила, если бы пробрасывался докер сокет
//         stage('Build and Deploy with Docker Compose') {
//             steps {
//                 // Сборка и запуск через Docker Compose
//                 sh '''
//                 docker stop $(docker ps -a -q)
//                 docker-compose -f lab4/DB/app/docker-compose.yml up -d --build
//                 '''
//             }
//         }
//
//         stage('Health Check') {
//             steps {
//                 script {
//                     // Проверка состояния контейнеров
//                     def flaskStatus = sh(
//                         script: "docker ps | grep flask_app",
//                         returnStatus: true
//                     )
//                     def dbStatus = sh(
//                         script: "docker ps | grep postgres_db",
//                         returnStatus: true
//                     )
//                     if (flaskStatus != 0 || dbStatus != 0) {
//                         error("One or more containers failed to start.")
//                     }
//                 }
//             }
//         }
//
//         stage('Stop and Clean Containers') {
//             steps {
//                 sh '''
//                 # Останавливаем и удаляем все контейнеры
//                 docker stop $(docker ps -a -q)
//
//                 # Проверяем и удаляем ненужные volumes
//                 docker volume prune -f
//                 '''
//             }
//         }

    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
